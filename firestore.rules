rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read and update their own patient profiles
    match /patients/{patientId} {
      allow read, write: if request.auth != null && request.auth.uid == patientId;
    }
    
    // Allow doctors to read patient data for scheduling purposes
    match /patients/{patientId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/doctors/$(request.auth.uid));
    }
    
    // Allow doctors to read and update their own doctor profiles
    // Allow patients to read doctor profiles (for doctor discovery and booking)
    match /doctors/{doctorId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == doctorId;
    }
    
    // Allow doctors to manage their own settings (including working hours)
    // Allow patients to read doctor settings for availability generation
    match /doctorSettings/{doctorId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == doctorId;
    }
    
    // Allow doctors to manage their own calendar
    match /doctorCalendars/{doctorId} {
      allow read, write: if request.auth != null && request.auth.uid == doctorId;
    }
    
    // Allow access to specific date collections within doctorCalendars
    match /doctorCalendars/{doctorId}/dates/{dateId} {
      allow read, write: if request.auth != null && request.auth.uid == doctorId;
    }
    
    // Allow access to appointments within specific dates
    match /doctorCalendars/{doctorId}/dates/{dateId}/appointments/{appointmentId} {
      allow read, write: if request.auth != null && request.auth.uid == doctorId;
    }
    
    // Allow access to categories
    match /categories/{categoryId} {
      allow read: if request.auth != null;
    }
    
    // Allow everyone to read services
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/doctors/$(request.auth.uid));
    }
    
    // Allow availability to be read by patients and managed by the relevant doctor
    // Temporarily allow patients to create availability for testing
    match /availability/{availId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.resource.data.doctor_id == request.auth.uid;
    }
    
    // Allow bookings to be read by the relevant doctor and patient
    // and created/updated by patients
    match /bookings/{bookingId} {
      allow get: if request.auth != null && 
        (resource.data.doctor_id == request.auth.uid || 
         resource.data.patient_id == request.auth.uid);
      allow list: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.doctor_id == request.auth.uid || 
         resource.data.patient_id == request.auth.uid);
    }

    match /chats/{chatId} {
      allow get, update, delete: if request.auth.uid in chatId.split('_');
      allow create: if request.auth.uid in request.resource.data.participants
                 && chatId == request.resource.data.participants[0] + '_' + request.resource.data.participants[1];

      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // Allow admins to read and write all data (this should be last)
    match /{document=**} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}