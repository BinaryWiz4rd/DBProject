package com.example.project.Patient

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.example.project.Booking
import com.example.project.R
import com.example.project.util.FirestoreHelper

class ConfirmBookingFragment : Fragment() {

    private lateinit var firestoreHelper: FirestoreHelper
    private val args: ConfirmBookingFragmentArgs by navArgs()

    private lateinit var serviceIdTextView: TextView
    private lateinit var doctorIdTextView: TextView
    private lateinit var dateTextView: TextView
    private lateinit var timeTextView: TextView
    private lateinit var patientNameEditText: EditText
    private lateinit var confirmBookingButton: Button

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_confirm_booking, container, false)

        firestoreHelper = FirestoreHelper()

        serviceIdTextView = view.findViewById(R.id.bookingServiceIdTextView)
        doctorIdTextView = view.findViewById(R.id.bookingDoctorIdTextView)
        dateTextView = view.findViewById(R.id.bookingDateTextView)
        timeTextView = view.findViewById(R.id.bookingTimeTextView)
        patientNameEditText = view.findViewById(R.id.patientNameEditText)
        confirmBookingButton = view.findViewById(R.id.confirmBookingButton)

        // Populate the views with navigation arguments
        serviceIdTextView.text = args.serviceId
        doctorIdTextView.text = args.doctorId
        dateTextView.text = args.date
        timeTextView.text = "${args.startTime} - ${args.endTime}"

        confirmBookingButton.setOnClickListener {
            val patientName = patientNameEditText.text.toString().trim()
            if (patientName.isEmpty()) {
                patientNameEditText.error = "Patient name is required"
                patientNameEditText.requestFocus()
                return@setOnClickListener
            }

            // Create Booking object
            val booking = Booking(
                // id will be auto-generated by Firestore
                doctor_id = args.doctorId,
                service_id = args.serviceId,
                date = args.date,
                start_time = args.startTime,
                end_time = args.endTime,
                patient_name = patientName, // Or patient_id if you change the model
                status = "confirmed" // Default status
            )

            addBookingToFirestore(booking)
        }

        return view
    }

    private fun addBookingToFirestore(booking: Booking) {
        firestoreHelper.addBooking(booking)
            .addOnSuccessListener {
                Toast.makeText(context, "Booking confirmed!", Toast.LENGTH_LONG).show()
                Log.d("ConfirmBookingFragment", "Booking added successfully for ${booking.patient_name}")
                // Navigate back to the patient's main screen or a booking success screen
                // For now, let's navigate back to the PatientFragment (patient's home)
                // You might need to adjust the action ID based on your nav_graph.xml
                findNavController().popBackStack(R.id.patientFragment, false) // Pops back to PatientFragment
            }
            .addOnFailureListener { e ->
                Toast.makeText(context, "Booking failed. Please try again.", Toast.LENGTH_LONG).show()
                Log.e("ConfirmBookingFragment", "Error adding booking", e)
            }
    }
}
